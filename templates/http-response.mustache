(ns ringx.util.http-response
  (:require [slingshot.slingshot :refer [throw+]]
            [potemkin.namespaces :as p]
             ring.util.response))

(defn throw!
  "Slingshots an exception with :type :ringx.util.http-response/response and the full response in :response"
  [response]
  {:pre (map? response)}
  (throw+ {:type ::response :response response}))
{{#template}}

(defn {{fn-name}}
  "{{status}} {{name}} ({{type}})
  {{description}}"
  {{#entity?}}([] ({{fn-name}} nil))
  {{/entity?}}([{{#entity?}}body{{/entity?}}{{#location?}}url{{/location?}}]
   {:status {{status}}
    :headers {{#location?}}{"Location" url}{{/location?}}{{^location?}}{}{{/location?}}
    :body {{#entity?}}body{{/entity?}}{{^entity?}}""{{/entity?}}}))
{{^success?}}

(defn {{fn-name}}!
  "{{status}} {{name}} ({{type}})
  {{description}}
  Slingshots an exception with :type :ringx.util.http-response/response and the full response in :response"
  {{#entity?}}([] ({{fn-name}}! nil)){{/entity?}}
  ([body]
   (throw!
     {:status {{status}}
      :headers {}
      :body body})))
{{/success?}}
{{/template}}

;;
;; Imported vars from ring.util.response
;;

(defmacro safe-import [ns sym]
  (if (ns-resolve ns sym)
    `(p/import-vars [~ns ~sym])))

{{#imports}}
(safe-import ring.util.response {{{.}}})
{{/imports}}
